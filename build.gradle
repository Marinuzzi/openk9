/*
 * This file was generated by the Gradle 'init' task.
 *
 * This is a general purpose Gradle build.
 * Learn more about Gradle by exploring our samples at https://docs.gradle.org/6.7/samples
 */

import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.DockerPushImage
import com.bmuschko.gradle.docker.tasks.image.DockerRemoveImage
import com.bmuschko.gradle.docker.tasks.image.Dockerfile

buildscript {
	repositories {
		maven {
			url "https://plugins.gradle.org/m2/"
		}
	}
	dependencies {
		classpath "biz.aQute.bnd:biz.aQute.bnd.gradle:5.3.0"
		classpath 'net.saliman:gradle-properties-plugin:1.5.1'
		classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:3.1.1"
		classpath "com.github.node-gradle:gradle-node-plugin:3.0.1"
		classpath "io.freefair.gradle:lombok-plugin:5.3.3.3"
		classpath "com.bmuschko:gradle-docker-plugin:6.6.0"
		classpath 'de.undercouch:gradle-download-task:4.1.1'
	}
}

apply plugin: 'net.saliman.properties'
apply plugin: 'org.sonarqube'
apply plugin: 'de.undercouch.download'

def karafVersion = findProperty("karaf.version")

def karafUrl = findProperty("karaf.${karafVersion}.patch_url")

if (karafUrl == null) {
	karafUrl = "http://archive.apache.org/dist/karaf/${karafVersion}/apache-karaf-${karafVersion}.tar.gz"
}

ext.libraries = [
		vavr: 'io.vavr:vavr:0.10.3',
		jackson_annotations: 'com.fasterxml.jackson.core:jackson-annotations:2.11.3',
		jackson: [
				'com.fasterxml.jackson.core:jackson-databind:2.11.3',
				'com.fasterxml.jackson.dataformat:jackson-dataformat-cbor:2.11.3',
		 		'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.11.3',
				'com.fasterxml.jackson.dataformat:jackson-dataformat-smile:2.11.3',
				'com.fasterxml.jackson.dataformat:jackson-dataformat-xml:2.11.3',
				'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.11.3',
				'com.fasterxml.jackson.core:jackson-annotations:2.11.3',
				'com.fasterxml.jackson.core:jackson-core:2.11.3',
				'com.fasterxml.jackson.module:jackson-module-jsonSchema:2.11.3'
		],
		slf4j_api: 'org.slf4j:slf4j-api:1.7.29',
		r2dbc_spi: 'io.r2dbc:r2dbc-spi:0.8.5.RELEASE',
		r2dbc_pool: 'io.r2dbc:r2dbc-pool:0.8.7.RELEASE',
		r2dbc_proxy: 'io.r2dbc:r2dbc-spi:r2dbc-proxy:0.8.6.RELEASE',
		r2dbc_postgresql: 'io.r2dbc:r2dbc-postgresql:0.8.8.RELEASE',
		micrometer: 'io.micrometer:micrometer-core:1.6.2',
		micrometer_registry_prometheus: 'io.micrometer:micrometer-registry-prometheus:1.6.2',
		micrometer_registry_elastic: 'io.micrometer:micrometer-registry-elastic:1.6.2',
		prometheus: [
				'io.prometheus:simpleclient_common:0.9.0',
				'io.prometheus:simpleclient:0.9.0'
		],
		hdrhistogram: 'org.hdrhistogram:HdrHistogram:2.1.12',
		latencyutils: 'org.latencyutils:LatencyUtils:2.0.3',
		reactivestreams: 'org.reactivestreams:reactive-streams:1.0.3',
		caffeine: 'com.github.ben-manes.caffeine:caffeine:2.8.8',
		checkerframework_checker_qual: 'org.checkerframework:checker-qual:3.8.0',
		google_errorprone_error_prone_annotations: 'com.google.errorprone:error_prone_annotations:2.4.0',
		reactor: [
		        'io.projectreactor:reactor-core:3.4.8'
		],
		reactor_extra: 'io.projectreactor.addons:reactor-extra:3.4.3',
		reactor_tools: 'io.projectreactor:reactor-tools:3.4.8',
		reactor_netty: [
				'io.projectreactor.netty:reactor-netty:1.0.9'
		],
		osgi: 'org.osgi:osgi.core:7.0.0',
		osgi_cmpn: 'org.osgi:osgi.cmpn:7.0.0',
		osgi_cm: 'org.osgi:org.osgi.service.cm:1.6.0',
		metatype: [
				'org.osgi:org.osgi.service.metatype.annotations:1.4.0',
				'org.osgi:org.osgi.service.metatype:1.4.0'
		],
		osgi_service_cm: 'org.osgi:org.osgi.service.cm:1.6.0',
		felix_file_install: 'org.apache.felix:org.apache.felix.fileinstall:3.6.8',
		felix_cm_json: [
				'org.apache.felix:org.apache.felix.cm.json:1.0.2',
				'org.apache.geronimo.specs:geronimo-json_1.1_spec:1.2'
		],
		reactor_rabbitmq: 'io.projectreactor.rabbitmq:reactor-rabbitmq:1.5.2',
		karaf_scheduler: [
				"org.apache.karaf.scheduler:org.apache.karaf.scheduler.core:$karafVersion"
		],
		karaf_features: [
				"org.apache.karaf.features:org.apache.karaf.features.core:$karafVersion"
		],
		karaf_jdbc_core: [
				"org.apache.karaf.jdbc:org.apache.karaf.jdbc.core:$karafVersion"
		],
		karaf_system: [
				"org.apache.karaf.system:org.apache.karaf.system.core:$karafVersion"
		],
		karaf_util: [
				"org.apache.karaf:org.apache.karaf.util:$karafVersion"
		],
		karaf_config: [
				"org.apache.karaf.config:org.apache.karaf.config.core:$karafVersion"
		],
		apache_commons_lang3: [
				'org.apache.commons:commons-lang3:3.12.0'
		],
		'commons_codec' : 'commons-codec:commons-codec:1.15',
		elasticsearch: 'org.elasticsearch.client:elasticsearch-rest-high-level-client:7.15.0',
		avro: 'org.apache.avro:avro:1.10.0',
		felix_dependencymanager: 'org.apache.felix:org.apache.felix.dependencymanager:4.6.0',
		neo4j_java_driver: 'org.neo4j.driver:neo4j-java-driver:4.2.3',
		neo4j_cypher_dsl: 'org.neo4j:neo4j-cypher-dsl:2021.1.1',
		neo4j_query_dsl_core: 'com.querydsl:querydsl-core:4.4.0',
		guava: 'com.google.guava:guava:18.0',
		groovy: 'org.codehaus.groovy:groovy:3.0.8',
		vertx_core: 'io.vertx:vertx-core:4.2.1',
		vertx_service_discovery: [
				'io.vertx:vertx-service-discovery:4.2.1',
				'io.vertx:vertx-service-discovery-bridge-kubernetes:4.2.1'
		],
		vertx_config: [
				'io.vertx:vertx-config:4.2.1',
				'io.vertx:vertx-config-kubernetes-configmap:4.2.1'
		],
		vertx_web: 'io.vertx:vertx-web:4.2.1',
		vertx_auth: [
				'io.vertx:vertx-auth-oauth2:4.2.1',
				'io.vertx:vertx-auth-jwt:4.2.1'
		],
		vertx_rabbitmq: 'io.vertx:vertx-rabbitmq-client:4.2.1',
		vertx_rxjava3: 'io.vertx:vertx-rx-java3:4.2.1',
		vertx_consul_client: 'io.vertx:vertx-consul-client:4.2.1',
		vertx_service_discovery_bridge_consul: 'io.vertx:vertx-service-discovery-bridge-consul:4.2.1'
]

def projectVersion = findProperty("project.version")
def projectGroupId = findProperty("project.groupId")

subprojects {
	def bndfile = file("$projectDir/bnd.bnd");
	if (!bndfile.exists()) {
		return;
	}

	apply plugin: 'java'
	apply plugin: 'biz.aQute.bnd.builder'
	apply plugin: "io.freefair.lombok"

	lombok {
		version = "1.18.18"
	}

	generateLombokConfig.enabled = false

	jar {
		ext.taskprop = 'prop.task'
	}

	repositories {
		mavenLocal()
		mavenCentral()
	}

	sourceCompatibility = 11
	targetCompatibility = 11

	dependencies {
		constraints {
			implementation("org.apache.logging.log4j:log4j-core") {
				version {
					strictly("[2.17, 3[")
					prefer("2.17.0")
				}
				because("CVE-2021-44228: Log4j vulnerable to remote code execution")
			}
		}
		compileOnly 'org.osgi:org.osgi.service.component.annotations:1.4.0'
		compileOnly 'org.projectlombok:lombok:1.18.18'
		compileOnly group: 'org.osgi', name: 'org.osgi.annotation.bundle', version: '1.1.0'
		compileOnly group: 'org.osgi', name: 'org.osgi.namespace.extender', version: '1.0.1'
		compileOnly libraries.metatype
		annotationProcessor 'org.projectlombok:lombok:1.18.18'
	}

	apply from: "$rootDir/build-publishing.gradle"

	task buildBundleDir(type: Copy) {
		dependsOn(jar)
		from(zipTree(tasks.jar.outputs.files.singleFile))
		into "$buildDir/bundleDir"
	}

}

apply from: "build-dist.gradle"

apply plugin: 'com.bmuschko.docker-remote-api'

if (System.getenv("CI_REGISTRY_NAME") != null) {
	docker {
		registryCredentials {
			url.set(System.getenv("CI_REGISTRY_NAME"))
			username.set(System.getenv("CI_REGISTRY_USERNAME"))
			password.set(System.getenv("CI_REGISTRY_PASSWORD"))
		}
	}
}

task downloadKaraf(type: Download) {
	src karafUrl
	dest "$rootDir/build/karaf/apache-karaf.tar.gz"
	overwrite false
	onlyIfModified true
	connectTimeout 30
	readTimeout 0
	retries 5
}

def distConfigurations = configurations
		.findAll({it.name.startsWith("dist")})
		.collect()

distConfigurations
		.forEach({conf ->

			def dependencies = conf.dependencies

			def confTmp = configurations.create("confTmp-$conf.name")

			confTmp.dependencies.addAll(dependencies)

			def distPrimaryName = conf.name.substring(4)

			def distName = toSnakeCase(distPrimaryName)

			def buildDistTask = tasks.register("build${distPrimaryName}", Copy, {
				from(confTmp)
				into "$rootDir/build/$distName/libs"
			})

			def copyConfigs = tasks.register("copyConfigs${distPrimaryName}", Copy, {
				from(file("$rootDir/$distName/configs"))
				into "$rootDir/build/$distName/configs"
			})

			def unTarKaraf = tasks.register("unTarKaraf${distPrimaryName}", Copy, {
				dependsOn(downloadKaraf)
				from(tarTree("$rootDir/build/karaf/apache-karaf.tar.gz"))
				into("$rootDir/build/$distName/karaf")
			})

			def createKaraf = tasks.register("createKaraf${distPrimaryName}", Copy, {
				dependsOn(unTarKaraf, buildDistTask)
				from("$rootDir/build/$distName/libs")
				include '*.jar'
				into("$rootDir/build/$distName/karaf/apache-karaf-$karafVersion/deploy")
			})

			tasks.register("distTar${distPrimaryName}", Tar, {
				dependsOn(createKaraf)
				archiveName("$projectGroupId-$distName-${projectVersion}.tar")
				from "$rootDir/build/$distName/karaf/apache-karaf-$karafVersion"
				destinationDir(file("$rootDir/build/$distName/karaf"))
			})

			tasks.register("distZip${distPrimaryName}", Zip, {
				dependsOn(createKaraf)
				archiveName("$projectGroupId-$distName-${projectVersion}.zip")
				from "$rootDir/build/$distName/karaf/apache-karaf-$karafVersion"
				destinationDir(file("$rootDir/build/$distName/karaf"))
			})

			def createDockerFile = tasks.register("createDockerFile${distPrimaryName}", Dockerfile, {
				dependsOn(copyConfigs, buildDistTask)

				from("eclipse-temurin:17.0.1_12-jre-alpine")
				environmentVariable("KARAF_INSTALL_PATH", "/opt")
				environmentVariable("KARAF_HOME", '$KARAF_INSTALL_PATH/apache-karaf')
				environmentVariable("KARAF_EXEC", "exec")
				environmentVariable("PATH", '$PATH:$KARAF_HOME/bin')
				environmentVariable("EXTRA_JAVA_OPTS", "-javaagent:/reactor-tools.jar")

				addFile(karafUrl, '/opt')
				runCommand('tar -xzf /opt/' + "apache-karaf-*.tar.gz -C /opt/")
				runCommand('rm /opt/' + "apache-karaf-*.tar.gz")
				runCommand('set -x && ln -s /opt/apache-karaf* $KARAF_HOME')
				exposePort(8101, 1099, 44444, 8181, 9999, 8080)

				addFile("https://repo1.maven.org/maven2/io/projectreactor/reactor-tools/3.4.6/reactor-tools-3.4.6.jar", "/reactor-tools.jar")
				copyFile("libs/", "opt/apache-karaf/deploy")
				copyFile("configs/", "opt/apache-karaf/etc")
				addFile("https://github.com/ufoscout/docker-compose-wait/releases/download/2.8.0/wait", "/wait")

				runCommand(
					'''chmod +x /wait \\
                       && chmod g+rx /reactor-tools.jar \\
                       && chmod -R "g+rw" /opt/apache-karaf-4.3.5 \\
                       && mkdir -p $KARAF_HOME/data/log \\
                       && chmod g+rwx $KARAF_HOME/data \\
                       && chmod g+rwx $KARAF_HOME/data/log'''.stripIndent()
				)
				defaultCommand("karaf", "run")
				destFile.set(file("$rootDir/build/$distName/docker/Dockerfile"))
			})

			tasks.register("buildImage${distPrimaryName}", DockerBuildImage, {
				dependsOn(createDockerFile)
				inputDir.set(file("$rootDir/build/$distName"))
				dockerFile.set(file("$rootDir/build/$distName/docker/Dockerfile"))
				images.add("openk9-$distName:latest")
				if (System.getenv("CI_REGISTRY_NAME") != null) {
					def dockerTagTemplate = findProperty("docker.tag.template")
					images.add(
						dockerTagTemplate
							.replace("{CI_REGISTRY_NAME}", System.getenv("CI_REGISTRY_NAME"))
							.replace("{IMAGE_ID}", "openk9-$distName:latest")
					)
					if (System.getenv("CI_COMMIT_TAG") != null) {
						def tagName = System.getenv("CI_COMMIT_REF_NAME")
						images.add(
							dockerTagTemplate
								.replace("{CI_REGISTRY_NAME}", System.getenv("CI_REGISTRY_NAME"))
								.replace("{IMAGE_ID}", "openk9-$distName:$tagName")
						)
					}
				}
			})

			tasks.register("removeImage${distPrimaryName}", DockerRemoveImage, {
				force.set(true)
				targetImageId "openk9-$distName:latest"
			})

			if (System.getenv("CI_REGISTRY_NAME") != null) {

				def dockerTagTemplate = findProperty("docker.tag.template")

				tasks.register("pushImage${distPrimaryName}", DockerPushImage, {
					dependsOn("buildImage${distPrimaryName}")
					images.add(
						dockerTagTemplate
							.replace("{CI_REGISTRY_NAME}", System.getenv("CI_REGISTRY_NAME"))
							.replace("{IMAGE_ID}", "openk9-$distName:latest")
					)
					if (System.getenv("CI_COMMIT_TAG") != null) {
						def tagName = System.getenv("CI_COMMIT_REF_NAME")
						images.add(
							dockerTagTemplate
								.replace("{CI_REGISTRY_NAME}", System.getenv("CI_REGISTRY_NAME"))
								.replace("{IMAGE_ID}", "openk9-$distName:$tagName")
						)
					}
				})
			}

			tasks.register("libsFolder${distPrimaryName}", {
				doLast {
					println "$rootDir/build/$distName/libs"
				}
			})

			tasks.register("deploy${distPrimaryName}", Copy, {
				from(confTmp)
				into "$rootDir/$distName/deploy"
			})

			def cleanDist = tasks.register("clean${distPrimaryName}", Delete, {
				delete("$rootDir/build/$distName")
			})

			clean.dependsOn(cleanDist)

		})

task cleanDist {
	def cleanDistTaskNames = distConfigurations
			.collect({tasks.named("clean${it.name.substring(4)}")})
	dependsOn(cleanDistTaskNames)
}

task buildDist {
	def buildDistTaskNames = distConfigurations
			.collect({tasks.named("build${it.name.substring(4)}")})
	dependsOn(buildDistTaskNames)
}

task buildImages {
	def buildImageTaskNames = distConfigurations
			.collect({tasks.named("buildImage${it.name.substring(4)}")})
	dependsOn(buildImageTaskNames)
}

task distTar {
	def buildImageTaskNames = distConfigurations
			.collect({tasks.named("distTar${it.name.substring(4)}")})
	dependsOn(buildImageTaskNames)
}

task distZip {
	def buildImageTaskNames = distConfigurations
			.collect({tasks.named("distZip${it.name.substring(4)}")})
	dependsOn(buildImageTaskNames)
}

if (System.getenv("CI_REGISTRY_NAME") != null) {
	task pushImages {
		def pushImageTaskNames = distConfigurations
				.collect({tasks.named("pushImage${it.name.substring(4)}")})
		dependsOn(pushImageTaskNames)
	}
}

task deployDist {
	def deployDistTaskNames = distConfigurations
			.collect({tasks.named("deploy${it.name.substring(4)}")})
	dependsOn(deployDistTaskNames)
}

task distList {
	doLast {
		distConfigurations
				.forEach({conf -> println(toSnakeCase(conf.name.substring(4)))})
	}
}

task distTasks {
	doLast {
		distConfigurations
				.forEach({conf -> println("build${conf.name.substring(4)}")})
	}
}

static String toSnakeCase(String text ) {
	text.replaceAll(/([A-Z])/, /-$1/).toLowerCase().replaceAll(/^-/, '')
}

task createDockerFiles {
	def createDockerFileNames = distConfigurations
			.collect({tasks.named("createDockerFile${it.name.substring(4)}")})
	dependsOn(createDockerFileNames)
}
