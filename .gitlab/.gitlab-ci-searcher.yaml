stages:
  - build-image
  - container-scanning
  - deploy
  - restart

variables:
  CS_ANALYZER_IMAGE: "$CI_TEMPLATE_REGISTRY_HOST/security-products/container-scanning:7"

include:
  - local: '/.gitlab/.gitlab-templates.yaml'





########################################################
######################### JOBS #########################
########################################################

Build Searcher Image:
  extends: .build_template
  variables:
    COMPONENT: "searcher"
  stage: build-image
  before_script:
    - apt-get update && apt-get install -y maven
  script:
    - cd core
    - |
      # Estrai la versione dal pom.xml e impostala come variabile di ambiente
      VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
      echo "VERSION=$VERSION"
      echo "$VERSION" > $CI_PROJECT_DIR/.version
    - |
      if [[ "$CI_COMMIT_BRANCH" == "main" || $CI_COMMIT_TAG != "" ]]; then                                               
        ./mvnw package $MAVEN_CLI_OPTS -pl app/searcher -am -Dquarkus.container-image.build=true -Dquarkus.container-image.push=true
      elif [[ "$CI_PIPELINE_SOURCE" == "merge_request_event" ]]; then
        ./mvnw package $MAVEN_CLI_OPTS -pl app/entity-manager -am -Dquarkus.container-image.build=false -Dquarkus.container-image.push=false
      elif [[ "$CI_COMMIT_BRANCH" =~ ^[0-9]+-.*$ && "$GITLAB_USER_LOGIN" == "michele.bastianelli" ]]; then
        ./mvnw package $MAVEN_CLI_OPTS -pl app/searcher -am -Dquarkus.container-image.build=true -Dquarkus.container-image.push=true -Dquarkus.container-image.tag=998-SNAPSHOT -P 'exclude-quarkus-test'
      elif [[ "$CI_COMMIT_BRANCH" =~ ^[0-9]+-.*$ ]]; then
        ./mvnw package $MAVEN_CLI_OPTS -pl app/searcher -am -Dquarkus.container-image.build=true -Dquarkus.container-image.push=true -Dquarkus.container-image.tag=999-SNAPSHOT -P 'exclude-quarkus-test'
      fi
  artifacts:
    paths:
      - .version
    expire_in: 24 hours
  rules:
    # Caso 1: Quando c'è un commit su main (push su main)
    - if: '$CI_COMMIT_BRANCH == "main"'
    # Caso 2: Quando viene approvata una merge request
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    # Caso 3: Quando viene creato un tag
    - if: '$CI_COMMIT_TAG'
    # Blocco della prima esecuzione quando viene creato un branch
    - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BEFORE_SHA == "0000000000000000000000000000000000000000"'
      when: never
    # Caso 4: Quando il commit è fatto su una feature branch che rispetta il pattern ^[0-9]+-.*$
    - if: '$CI_COMMIT_BRANCH =~ /^([0-9]+-.*)$/'

############## Container scanning ##############


Container Scanning Searcher:
  extends: .container-scanning-template
  variables:
    REGISTRY_COMPONENT_NAME: "openk9-searcher"
  dependencies: [Build Searcher Image]


############## Restart ##############

Trigger Restart Searcher:
  image: alpine:latest
  stage: restart
  script:
    - apk add --no-cache curl
    - echo "CI_COMMIT_BRANCH=$CI_COMMIT_BRANCH"
    - echo "CI_COMMIT_AUTHOR=$CI_COMMIT_AUTHOR"
    - AUTHOR_NAME=$(echo $CI_COMMIT_AUTHOR | cut -d ' ' -f 1)
    - echo "AUTHOR_NAME=$AUTHOR_NAME"
    - |
      if [[ "$CI_COMMIT_BRANCH" == "main" || "$CI_COMMIT_BRANCH" =~ ^[0-9]+-.*$ || "$CI_COMMIT_TAG" != "" ]]; then
        echo "Branch matches main or pattern"
        if [[ "$GITLAB_USER_LOGIN" == "michele.bastianelli" ]]; then
          echo "Triggering restart-searcher with backend version"
          curl -X POST -F token=$RESTART_TRIGGER_TOKEN -F "variables[TRIGGER_JOB]=restart-searcher" -F "variables[NAMESPACE]=k9-backend01" -F ref=master $RESTART_TRIGGER_URL
        else
          echo "Triggering restart-searcher (default)"
          curl -X POST -F token=$RESTART_TRIGGER_TOKEN -F "variables[TRIGGER_JOB]=restart-searcher" -F ref=masters $RESTART_TRIGGER_URL
        fi
      else
        echo "Branch does not match main or pattern"
      fi
  rules:
    # Caso 1: Quando c'è un commit su main (push su main)
    - if: '$CI_COMMIT_BRANCH == "main"'
    # Caso 2: Quando viene approvata una merge request
    #- if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    # Caso 3: Quando viene creato un tag
    - if: '$CI_COMMIT_TAG'
    # Blocco della prima esecuzione quando viene creato un branch
    - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BEFORE_SHA == "0000000000000000000000000000000000000000"'
      when: never
    # Caso 4: Quando il commit è fatto su una feature branch che rispetta il pattern ^[0-9]+-.*$
    - if: '$CI_COMMIT_BRANCH =~ /^([0-9]+-.*)$/'

