stages:
  - quality
  - build
  - test
  - build-docker
  - deploy
  - push-github

include:
  - local: '/.gitlab/.gitlab-ci-search-frontend.yml'
  - local: '/.gitlab/.gitlab-ci-admin-frontend.yml'
  - local: '/.gitlab/.gitlab-ci-site.yml'
  - local: '/.gitlab/.gitlab-ci-datasource.yml'
  - local: '/.gitlab/.gitlab-ci-entity-manager.yml'
  - local: '/.gitlab/.gitlab-ci-ingestion.yml'
  - local: '/.gitlab/.gitlab-ci-searcher.yml'
  - local: '/.gitlab/.gitlab-ci-tenant-manager.yml'
  - local: '/.gitlab/.gitlab-ci-plugins.yml'
  - local: '/.gitlab/.gitlab-ci-tika-no-ocr.yml'
  - local: '/.gitlab/.gitlab-ci-tika-ocr.yml'
  - local: '/.gitlab/.gitlab-ci-resources-validator.yml'
  - local: '/.gitlab/.gitlab-ci-file-manager.yml'
  - local: '/.gitlab/.gitlab-ci-native.yml'

sonarqube-check:
  stage: quality
  image:
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [""]
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
    GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  before_script:
    - mkdir /tmp/empty
  script:
    - sonar-scanner -Dsonar.qualitygate.wait=true
  allow_failure: true
  only:
    - merge_requests
    - main
  except:
    - schedules


push-github:
  stage: push-github
  image: alpine/git:latest
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
  script:
    - git checkout main
    - git remote add public https://$GITHUB_TOKEN@github.com/smclab/openk9.git
    - git push public main
