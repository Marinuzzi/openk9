stages:
  - trigger
  - build-image
  - restart
  - maven_build
  - maven_dependency_check
  - quality
  - container-scanning
  - dependency-check
  - build
  - build-verifier
  - publish
  
#Cache globale differenziata per ambienti o dipendenze specifiche
cache:
  key: "maven-dependencies-${CI_COMMIT_REF_NAME}"
  paths:
    - .m2/repository
  policy: pull-push

variables:
  CS_ANALYZER_IMAGE: "$CI_TEMPLATE_REGISTRY_HOST/security-products/container-scanning:7"


include:
  - local: '/.gitlab/.gitlab-ci-search-frontend.yaml'
  - local: '/.gitlab/.gitlab-ci-admin-frontend.yaml'
  - local: '/.gitlab/.gitlab-ci-tenant-frontend.yaml'
  - local: '/.gitlab/.gitlab-templates.yaml'


####################################################
################## DATASOURCE ######################
####################################################

Trigger Datasource:
  stage: trigger
  rules:
    # Caso 1: Quando c'è un commit su main (push su main)
    - if: '$CI_COMMIT_BRANCH == "main"'
    # Caso 2: Quando viene approvata una merge request
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_APPROVED == "true"'
    # Caso 3: Quando viene creato un tag
    - if: '$CI_COMMIT_TAG'
    # Blocco della prima esecuzione quando viene creato un branch (escludiamo questa esecuzione)
    - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BEFORE_SHA == "0000000000000000000000000000000000000000"'
      when: never
    # Caso 4: Quando il commit è fatto su una feature branch che rispetta il pattern ^\d+-.*$
    - if: '$CI_COMMIT_BRANCH =~ /^([0-9]+-.*)$/'
      changes:
        - core/app/datasource/**/*
        - core/service/**/*
        - core/common/graphql-util/**/*
        - core/common/model/**/*
        - core/common/resources-common/**/*
        - core/common/util/**/*
        - core/client/common/**/*
        - core/client/grpc/**/*
        - core/api/tenant-manager-api/**/*
        - core/common/datasource-model/**/*
  trigger:
    include: '/.gitlab/.gitlab-ci-datasource.yaml'

####################################################
##################  SEARCHER  ######################
####################################################

Trigger Searcher:
  stage: trigger
  rules:
    # Caso 1: Quando c'è un commit su main (push su main)
    - if: '$CI_COMMIT_BRANCH == "main"'
    # Caso 2: Quando viene approvata una merge request
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_APPROVED == "true"'
    # Caso 3: Quando viene creato un tag
    - if: '$CI_COMMIT_TAG'
    # Blocco della prima esecuzione quando viene creato un branch (escludiamo questa esecuzione)
    - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BEFORE_SHA == "0000000000000000000000000000000000000000"'
      when: never
    # Caso 4: Quando il commit è fatto su una feature branch che rispetta il pattern ^\d+-.*$
    - if: '$CI_COMMIT_BRANCH =~ /^([0-9]+-.*)$/'
      changes:
        - core/common/resources-common/**/*
        - core/app/searcher/**/*
        - core/service/**/*
        - core/client/common/**/*
        - core/client/grpc/**/*
        - core/api/tenant-manager-api/**/*
  trigger:
    include: '/.gitlab/.gitlab-ci-searcher.yaml'

####################################################
##################  INGESTION  #####################
####################################################

Trigger Ingestion:
  stage: trigger
  rules:
    # Caso 1: Quando c'è un commit su main (push su main)
    - if: '$CI_COMMIT_BRANCH == "main"'
    # Caso 2: Quando viene approvata una merge request
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_APPROVED == "true"'
    # Caso 3: Quando viene creato un tag
    - if: '$CI_COMMIT_TAG'
    # Blocco della prima esecuzione quando viene creato un branch (escludiamo questa esecuzione)
    - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BEFORE_SHA == "0000000000000000000000000000000000000000"'
      when: never
    # Caso 4: Quando il commit è fatto su una feature branch che rispetta il pattern ^\d+-.*$
    - if: '$CI_COMMIT_BRANCH =~ /^([0-9]+-.*)$/'
      changes:
        - core/app/ingestion/**/*
        - core/common/util/**/*
        - core/common/resources-common/**/*
  trigger:
    include: '/.gitlab/.gitlab-ci-ingestion.yaml'

####################################################
##################  K8S-CLIENT  ####################
####################################################

Trigger K8S-Client:
  stage: trigger
  rules:
    # Caso 1: Quando c'è un commit su main (push su main)
    - if: '$CI_COMMIT_BRANCH == "main"'
    # Caso 2: Quando viene approvata una merge request
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_APPROVED == "true"'
    # Caso 3: Quando viene creato un tag
    - if: '$CI_COMMIT_TAG'
    # Blocco della prima esecuzione quando viene creato un branch (escludiamo questa esecuzione)
    - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BEFORE_SHA == "0000000000000000000000000000000000000000"'
      when: never
    # Caso 4: Quando il commit è fatto su una feature branch che rispetta il pattern ^\d+-.*$
    - if: '$CI_COMMIT_BRANCH =~ /^([0-9]+-.*)$/'
      changes:
        - core/app/k8s-client/**/*
        - core/app/service/**/*
        - core/client/grpc/**/*
        - core/common/k8s-manifest/**/*
        - core/common/resources-common/**/*
        - core/common/util/**/*
        - core/client/common/**/*
        - core/api/tenant-manager-api/**/*
  trigger:
    include: '/.gitlab/.gitlab-ci-k8s-client.yaml'


####################################################
##################  FILE-MANAGER  ##################
####################################################

Trigger File-Manager:
  stage: trigger
  rules:
    # Caso 1: Quando c'è un commit su main (push su main)
    - if: '$CI_COMMIT_BRANCH == "main"'
    # Caso 2: Quando viene approvata una merge request
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_APPROVED == "true"'
    # Caso 3: Quando viene creato un tag
    - if: '$CI_COMMIT_TAG'
    # Blocco della prima esecuzione quando viene creato un branch (escludiamo questa esecuzione)
    - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BEFORE_SHA == "0000000000000000000000000000000000000000"'
      when: never
    # Caso 4: Quando il commit è fatto su una feature branch che rispetta il pattern ^\d+-.*$
    - if: '$CI_COMMIT_BRANCH =~ /^([0-9]+-.*)$/'
      changes:
        - core/app/file-manager/**/*
        - core/common/resources-common /**/*
        - core/client/grpc/**/*
  trigger:
    include: '/.gitlab/.gitlab-ci-file-manager.yaml'

####################################################
################  TENANT-MANAGER  ##################
####################################################

Trigger Tenant-Manager:
  stage: trigger
  rules:
    # Caso 1: Quando c'è un commit su main (push su main)
    - if: '$CI_COMMIT_BRANCH == "main"'
    # Caso 2: Quando viene approvata una merge request
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_APPROVED == "true"'
    # Caso 3: Quando viene creato un tag
    - if: '$CI_COMMIT_TAG'
    # Blocco della prima esecuzione quando viene creato un branch (escludiamo questa esecuzione)
    - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BEFORE_SHA == "0000000000000000000000000000000000000000"'
      when: never
    # Caso 4: Quando il commit è fatto su una feature branch che rispetta il pattern ^\d+-.*$
    - if: '$CI_COMMIT_BRANCH =~ /^([0-9]+-.*)$/'
      changes:
        - core/app/tenant-manager/**/*
        - core/common/graphql-util/**/*
        - core/common/model/**/*
        - core/common/resources-common/**/*
        - core/common/util/**/*
        - core/client/common/**/*
        - core/client/grpc/**/*
        - core/api/tenant-manager-api/**/*
        - core/common/datasource-model/**/*
  trigger:
    include: '/.gitlab/.gitlab-ci-tenant-manager.yaml'

####################################################
#####################   TIKA   #####################
####################################################

Trigger Tika no-ocr:
  stage: trigger
  rules:
    # Caso 1: Quando c'è un commit su main (push su main)
    - if: '$CI_COMMIT_BRANCH == "main"'
    # Caso 2: Quando viene approvata una merge request
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_APPROVED == "true"'
    # Caso 3: Quando viene creato un tag
    - if: '$CI_COMMIT_TAG'
    # Blocco della prima esecuzione quando viene creato un branch (escludiamo questa esecuzione)
    - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BEFORE_SHA == "0000000000000000000000000000000000000000"'
      when: never
    # Caso 4: Quando il commit è fatto su una feature branch che rispetta il pattern ^\d+-.*$
    - if: '$CI_COMMIT_BRANCH =~ /^([0-9]+-.*)$/'
      changes:
        - core/app/tika/**/*
        - core/common/resources-common/**/*
  trigger:
    include: '/.gitlab/.gitlab-ci-tika-no-ocr.yaml'



##########################################################################################################################
#############################################  Pipeline FRONT-END   ######################################################
##########################################################################################################################


####################################################
#################   Search Front-end   #############
####################################################



Trigger Search Frontend:
  stage: trigger
  rules:

    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      changes:
        - js-packages/search-frontend/**/*

    - if: '$CI_COMMIT_BRANCH == "main"'
      changes:
        - js-packages/search-frontend/**/*
  trigger:
    include: '/.gitlab/.gitlab-ci-search-frontend.yaml'
    strategy: depend

####################################################
#################   Admin Front-end   #############
####################################################

Trigger Admin Frontend:
  stage: trigger
  rules:

    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      changes:
        - js-packages/admin-ui/**/*

    - if: '$CI_COMMIT_BRANCH == "main"'
      changes:
        - js-packages/admin-ui/**/*
  trigger:
    include: '/.gitlab/.gitlab-ci-admin-frontend.yaml'
    strategy: depend

####################################################
#################   Tenant Front-end   #############
####################################################

Trigger Tenant Frontend:
  stage: trigger
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      changes:
        - js-packages/tenant-ui/**/*
    - if: '$CI_COMMIT_BRANCH == "main"'
      changes:
        - js-packages/tenant-ui/**/*
  trigger:
    include: '/.gitlab/.gitlab-ci-tenant-frontend.yaml'
    strategy: depend



####################################################
###############   Dependency Check FE   ############
####################################################

Dependency Check:
  stage: dependency-check
  image: "registry.gitlab.com/gitlab-org/security-products/analyzers/npm-audit:1.4.0"
  variables:
    TOOL: yarn
  script:
    - cd js-packages/admin-ui
    - /analyzer run
  artifacts:
    reports:
      dependency_scanning: gl-dependency-scanning-report.json
    paths:
      - gl-dependency-scanning-report.json
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      changes:
        - js-packages/**/*
    - if: '$CI_COMMIT_BRANCH == "main"'
      changes:
        - js-packages/**/*

############################################   FINE PIPELINE-FRONTEND   ####################################################


##################################################################################################
#  Rerfactoring delle 2 installazioni mvn per alleggerire il carico e non andare out of memory   #
##################################################################################################




Maven Install Hibernate:
  stage: maven_build
  image: maven:3.9.6-eclipse-temurin-21
  script:
    - cd vendor/hibernate-rx-multitenancy
    - mvn install
  artifacts:
    paths:
      - vendor/hibernate-rx-multitenancy/target
    expire_in: 1 week
  cache:
    key: "${CI_COMMIT_BRANCH}-dependency-hibernate"
    paths:
      - $CI_PROJECT_DIR/.m2/repository
    policy: pull-push
  rules:
    # Caso 1: Quando c'è un commit sul main (push su main)
    - if: '$CI_COMMIT_BRANCH == "main"'
      changes:
        - core/**/*
    # Caso 2: Quando viene approvata una merge request su main
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      changes:
        - core/**/*
    # Caso 3: Quando viene creato un tag
    - if: '$CI_COMMIT_TAG'
      changes:
        - core/**/*
    # Blocco della prima esecuzione quando viene creato un branch
    - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BEFORE_SHA == "0000000000000000000000000000000000000000"'
      when: never


Maven Install Core:
  stage: maven_build
  image: maven:3.9.6-eclipse-temurin-21
  needs:
    - job: "Maven Install Hibernate"
      artifacts: true
  script:
    - cd core
    - mvn install -P 'exclude-quarkus-test'
  artifacts:
    paths:
      - core/target
    expire_in: 1 week
  cache:
    key: "${CI_COMMIT_BRANCH}-dependency-core"
    paths:
      - $CI_PROJECT_DIR/.m2/repository
    policy: pull-push
  rules:
    # Caso 1: Quando c'è un commit sul main (push su main)
    - if: '$CI_COMMIT_BRANCH == "main"'
      changes:
        - core/**/*
    # Caso 2: Quando viene approvata una merge request su main
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      changes:
        - core/**/*
    # Caso 3: Quando viene creato un tag
    - if: '$CI_COMMIT_TAG'
      changes:
        - core/**/*
    # Blocco della prima esecuzione quando viene creato un branch
    - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BEFORE_SHA == "0000000000000000000000000000000000000000"'
      when: never


Maven Dependency Check:
  stage: maven_dependency_check
  image: maven:3.9.6-eclipse-temurin-21
  needs:
    - job: "Maven Install Core"
      artifacts: true
  variables:
    MAVEN_OPTS: "-Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn"
  script:
    - cd core
    - mvn -B org.owasp:dependency-check-maven:aggregate -P 'exclude-quarkus-test'
  artifacts:
    paths:
      - core/target/dependency-check-report.html
    expire_in: 1 week
  cache:
    key: "${CI_COMMIT_BRANCH}-dependency-check"
    paths:
      - $CI_PROJECT_DIR/.m2/repository
    policy: pull-push
  rules:
    # Caso 1: Quando c'è un commit sul main (push su main)
    - if: '$CI_COMMIT_BRANCH == "main"'
      changes:
        - core/**/*
    # Caso 2: Quando viene approvata una merge request su main
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      changes:
        - core/**/*
    # Caso 3: Quando viene creato un tag
    - if: '$CI_COMMIT_TAG'
      changes:
        - core/**/*
    # Blocco della prima esecuzione quando viene creato un branch
    - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BEFORE_SHA == "0000000000000000000000000000000000000000"'
      when: never



#######################################################################################################
################################        SONARQUBE         #############################################
#######################################################################################################

SonarQube Check:
  stage: quality
  image:
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [""]
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"
    GIT_DEPTH: "0"
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  before_script:
    - mkdir /tmp/empty
  script:
    - sonar-scanner -Dsonar.qualitygate.wait=true
  allow_failure: true
  rules:
    # Caso 1: Quando c'è un commit sul main (push su main)
    - if: '$CI_COMMIT_BRANCH == "main"'
    # Caso 2: Quando viene approvata una merge request su main
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    # Caso 3: Quando viene creato un tag
    - if: '$CI_COMMIT_TAG'
    # Blocco della prima esecuzione quando viene creato un branch
    - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BEFORE_SHA == "0000000000000000000000000000000000000000"'
      when: never

