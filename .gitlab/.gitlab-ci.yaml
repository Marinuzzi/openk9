#############################################
#            GITLAB CI PIPELINE             #
#############################################

stages:
  - trigger
  - build
  - restart
  - quality
  - container-scanning
  - dependency-check
  - build-verifier
  - publish
  - push

# Cache globale, differenziata per ambienti o dipendenze specifiche
cache:
  key: "maven-dependencies-${CI_COMMIT_REF_NAME}"
  paths:
    - .m2/repository
  policy: pull-push

variables:
  # Immagine da usare per il container scanning
  CS_ANALYZER_IMAGE: "$CI_TEMPLATE_REGISTRY_HOST/security-products/container-scanning:7"



# QUANDO CI SONO CHANGES IN HELM CHART TRIGGERARE (per√≤ manuale)
include:
<<<<<<< HEAD
  - local: "/.gitlab/.gitlab-templates.yaml"
=======
  - local: '/.gitlab/.gitlab-templates.yaml'
  - local: '/.gitlab/helm-charts-pipeline/.gitlab-ci-01-base-core.yaml'
  - local: '/.gitlab/helm-charts-pipeline/.gitlab-ci-02-file-handling.yaml'
  - local: '/.gitlab/helm-charts-pipeline/.gitlab-ci-03-gen-ai.yaml'
  - local: '/.gitlab/helm-charts-pipeline/.gitlab-ci-04-knowledge-handling.yaml'
  - local: '/.gitlab/helm-charts-pipeline/.gitlab-ci-06-utilities.yaml'


>>>>>>> 1285-accorgimenti-vari-pipeline

################################################################################
#                               TRIGGER DATASOURCE                             #
################################################################################
Trigger Datasource:
  stage: trigger
  rules:
    # Caso 1: push su main
    - if: '$CI_COMMIT_BRANCH == "main"'

    # Caso 2: merge request approvata
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_APPROVED == "true"'

    # Caso 3: creazione tag
    - if: "$CI_COMMIT_TAG"

    # Blocco della prima esecuzione quando branch appena creato
    - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BEFORE_SHA == "0000000000000000000000000000000000000000"'
      when: never
    # Caso 4: feature branch che rispetta ^\d+-.*$
    - if: "$CI_COMMIT_BRANCH =~ /^([0-9]+-.*)$/"
      changes:
        - core/app/datasource/**/*
        - core/service/**/*
        - core/common/graphql-util/**/*
        - core/common/model/**/*
        - core/common/resources-common/**/*
        - core/common/util/**/*
        - core/client/common/**/*
        - core/client/grpc/**/*
        - core/api/tenant-manager-api/**/*
        - core/common/datasource-model/**/*
  trigger:
    include: "/.gitlab/.gitlab-ci-datasource.yaml"

################################################################################
#                               TRIGGER SEARCHER                               #
################################################################################
Trigger Searcher:
  stage: trigger
  rules:
    # Caso 1: push su main
    - if: '$CI_COMMIT_BRANCH == "main"'

    # Caso 2: merge request approvata
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_APPROVED == "true"'

    # Caso 3: creazione tag
    - if: "$CI_COMMIT_TAG"

    # Blocco della prima esecuzione quando branch appena creato
    - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BEFORE_SHA == "0000000000000000000000000000000000000000"'
      when: never
    # Caso 4: feature branch ^\d+-.*$
    - if: "$CI_COMMIT_BRANCH =~ /^([0-9]+-.*)$/"
      changes:
        - core/common/resources-common/**/*
        - core/app/searcher/**/*
        - core/service/**/*
        - core/client/common/**/*
        - core/client/grpc/**/*
        - core/api/tenant-manager-api/**/*
  trigger:
    include: "/.gitlab/.gitlab-ci-searcher.yaml"

################################################################################
#                               TRIGGER INGESTION                              #
################################################################################
Trigger Ingestion:
  stage: trigger
  rules:
    # Caso 1: push su main
    - if: '$CI_COMMIT_BRANCH == "main"'

    # Caso 2: merge request approvata
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_APPROVED == "true"'

    # Caso 3: creazione tag
    - if: "$CI_COMMIT_TAG"

    # Blocco della prima esecuzione quando branch appena creato
    - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BEFORE_SHA == "0000000000000000000000000000000000000000"'
      when: never

    # Caso 4: feature branch ^\d+-.*$
    - if: "$CI_COMMIT_BRANCH =~ /^([0-9]+-.*)$/"
      changes:
        - core/app/ingestion/**/*
        - core/common/util/**/*
        - core/common/resources-common/**/*
  trigger:
    include: "/.gitlab/.gitlab-ci-ingestion.yaml"

################################################################################
#                              TRIGGER K8S-CLIENT                              #
################################################################################
Trigger K8S-Client:
  stage: trigger
  rules:
    # Caso 1: push su main
    - if: '$CI_COMMIT_BRANCH == "main"'

    # Caso 2: merge request approvata
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_APPROVED == "true"'

    # Caso 3: creazione tag
    - if: "$CI_COMMIT_TAG"

    # Blocco della prima esecuzione quando branch appena creato
    - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BEFORE_SHA == "0000000000000000000000000000000000000000"'
      when: never

    # Caso 4: feature branch ^\d+-.*$
    - if: "$CI_COMMIT_BRANCH =~ /^([0-9]+-.*)$/"
      changes:
        - core/app/k8s-client/**/*
        - core/app/service/**/*
        - core/client/grpc/**/*
        - core/common/k8s-manifest/**/*
        - core/common/resources-common/**/*
        - core/common/util/**/*
        - core/client/common/**/*
        - core/api/tenant-manager-api/**/*
  trigger:
    include: "/.gitlab/.gitlab-ci-k8s-client.yaml"

################################################################################
#                             TRIGGER FILE-MANAGER                             #
################################################################################
Trigger File-Manager:
  stage: trigger
  rules:
    # Caso 1: push su main
    - if: '$CI_COMMIT_BRANCH == "main"'

    # Caso 2: merge request approvata
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_APPROVED == "true"'

    # Caso 3: creazione tag
    - if: "$CI_COMMIT_TAG"

    # Blocco della prima esecuzione quando branch appena creato
    - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BEFORE_SHA == "0000000000000000000000000000000000000000"'
      when: never

    # Caso 4: feature branch ^\d+-.*$
    - if: "$CI_COMMIT_BRANCH =~ /^([0-9]+-.*)$/"
      changes:
        - core/app/file-manager/**/*
        - core/common/resources-common **/*
        - core/client/grpc/**/*
  trigger:
    include: "/.gitlab/.gitlab-ci-file-manager.yaml"

################################################################################
#                           TRIGGER TENANT-MANAGER                             #
################################################################################
Trigger Tenant-Manager:
  stage: trigger
  rules:
    # Caso 1: push su main
    - if: '$CI_COMMIT_BRANCH == "main"'

    # Caso 2: merge request approvata
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_APPROVED == "true"'

    # Caso 3: creazione tag
    - if: "$CI_COMMIT_TAG"

    # Blocco della prima esecuzione quando branch appena creato
    - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BEFORE_SHA == "0000000000000000000000000000000000000000"'
      when: never

    # Caso 4: feature branch ^\d+-.*$
    - if: "$CI_COMMIT_BRANCH =~ /^([0-9]+-.*)$/"
      changes:
        - core/app/tenant-manager/**/*
        - core/common/graphql-util/**/*
        - core/common/model/**/*
        - core/common/resources-common/**/*
        - core/common/util/**/*
        - core/client/common/**/*
        - core/client/grpc/**/*
        - core/api/tenant-manager-api/**/*
        - core/common/datasource-model/**/*
  trigger:
    include: "/.gitlab/.gitlab-ci-tenant-manager.yaml"

################################################################################
#                              TRIGGER TIKA NO-OCR                             #
################################################################################
Trigger Tika no-ocr:
  stage: trigger
  rules:
    # Caso 1: push su main
    - if: '$CI_COMMIT_BRANCH == "main"'

    # Caso 2: merge request approvata
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_APPROVED == "true"'

    # Caso 3: creazione tag
    - if: "$CI_COMMIT_TAG"

    # Blocco della prima esecuzione quando branch appena creato
    - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BEFORE_SHA == "0000000000000000000000000000000000000000"'
      when: never

    # Caso 4: feature branch ^\d+-.*$
    - if: "$CI_COMMIT_BRANCH =~ /^([0-9]+-.*)$/"
      changes:
        - core/app/tika/**/*
        - core/common/resources-common/**/*
  trigger:
    include: "/.gitlab/.gitlab-ci-tika-no-ocr.yaml"

################################################################################
#                                TRIGGER TIKA OCR                              #
################################################################################
Trigger Tika ocr:
  stage: trigger
  rules:
    # Caso 1: push su main
    - if: '$CI_COMMIT_BRANCH == "main"'

    # Caso 2: merge request approvata
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_APPROVED == "true"'

    # Caso 3: creazione tag
    - if: "$CI_COMMIT_TAG"

    # Blocco della prima esecuzione quando branch appena creato
    - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BEFORE_SHA == "0000000000000000000000000000000000000000"'
      when: never

    # Caso 4: feature branch ^\d+-.*$
    - if: "$CI_COMMIT_BRANCH =~ /^([0-9]+-.*)$/"
      changes:
        - core/app/tika/**/*
        - core/common/resources-common/**/*
  trigger:
    include: "/.gitlab/.gitlab-ci-tika-ocr.yaml"

################################################################################
#                         PIPELINE FRONT-END TRIGGERS                          #
################################################################################

# SEARCH FRONTEND
Trigger Search Frontend:
  stage: trigger
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      changes:
        - js-packages/search-frontend/**/*
      when: manual
    - if: '$CI_COMMIT_BRANCH == "main"'
      changes:
        - js-packages/search-frontend/**/*
      when: manual
    - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BEFORE_SHA == "0000000000000000000000000000000000000000"'
      when: never
  trigger:
    include: "/.gitlab/.gitlab-ci-search-frontend.yaml"
    strategy: depend

# ADMIN FRONTEND
Trigger Admin Frontend:
  stage: trigger
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      changes:
        - js-packages/admin-ui/**/*
      when: manual
    - if: '$CI_COMMIT_BRANCH == "main"'
      changes:
        - js-packages/admin-ui/**/*
      when: manual
    # Blocco della prima esecuzione quando branch appena creato
    - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BEFORE_SHA == "0000000000000000000000000000000000000000"'
      when: never
  trigger:
    include: "/.gitlab/.gitlab-ci-admin-frontend.yaml"
    strategy: depend

# TENANT FRONTEND
Trigger Tenant Frontend:
  stage: trigger
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      changes:
        - js-packages/tenant-ui/**/*
      when: manual
    - if: '$CI_COMMIT_BRANCH == "main"'
      changes:
        - js-packages/tenant-ui/**/*
      when: manual
    # Blocco della prima esecuzione quando branch appena creato
    - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BEFORE_SHA == "0000000000000000000000000000000000000000"'
      when: never
  trigger:
    include: "/.gitlab/.gitlab-ci-tenant-frontend.yaml"
    strategy: depend

################################################################################
#                           MAVEN DEPENDENCY CHECK                              #
################################################################################
Maven Dependency Check:
  stage: dependency-check
  image: eclipse-temurin:21-jdk
  variables:
    MAVEN_OPTS: "-Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn"
  before_script:
    - cd core
    - ./mvnw install
  script:
    - ./mvnw -pl '!../vendor/hibernate-rx-multitenancy, !../vendor/hibernate-rx-multitenancy/runtime, !../vendor/hibernate-rx-multitenancy/deployment'  dependency-check:aggregate
  artifacts:
    paths:
      - core/target/dependency-check-report.html
    expire_in: 1 week
  cache:
    key: "${CI_COMMIT_BRANCH}-dependency-check"
    paths:
      - $CI_PROJECT_DIR/.m2/repository
    policy: pull-push
  rules:
    # Caso 1: push su main
    - if: '$CI_COMMIT_BRANCH == "main"'
    # Caso 2: MR su main
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    # Caso 3: tag
    - if: "$CI_COMMIT_TAG"
    # Blocco prima esecuzione su branch appena creato
    - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BEFORE_SHA == "0000000000000000000000000000000000000000"'
      when: never

################################################################################
#                                 SONARQUBE CHECK                               #
################################################################################
SonarQube Check:
  stage: quality
  image:
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [""]
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"
    GIT_DEPTH: "0"
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  before_script:
    - mkdir /tmp/empty
  script:
    - sonar-scanner -Dsonar.qualitygate.wait=true
  allow_failure: true
  rules:
    # Caso 1: push su main
    - if: '$CI_COMMIT_BRANCH == "main"'
    # Caso 2: MR su main
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    # Caso 3: tag
    - if: "$CI_COMMIT_TAG"
    # Blocco prima esecuzione su branch appena creato
    - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BEFORE_SHA == "0000000000000000000000000000000000000000"'
      when: never

################################################################################
#                                AI PIPELINE                                   #
################################################################################

# Build RAG MODULE
Trigger Rag Module:
  stage: trigger
  # Non blocca la pipeline se fallisce
  allow_failure: true
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
      changes:
        - ai-packages/rag-module/**/*
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      changes:
        - ai-packages/rag-module/**/*
    - if: "$CI_COMMIT_BRANCH =~ /^([0-9]+-.*)$/"
      changes:
        - ai-packages/rag-module/**/*
    # Blocco della prima esecuzione quando branch appena creato
    - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BEFORE_SHA == "0000000000000000000000000000000000000000"'
      when: never
  trigger:
    include: "/.gitlab/.gitlab-ci-rag-module.yaml"
    strategy: depend

# Procedere a fare la build di Ebedding anche se RAG fallisce
Trigger Embedding Module:
  stage: trigger
  # ‚Äúneeds‚Äù assicura che venga eseguito dopo ‚ÄúTrigger Rag Module‚Äù
  needs:
    - job: "Trigger Rag Module"
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
      changes:
        - ai-packages/embedding-modules/**/*
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      changes:
        - ai-packages/embedding-modules/**/*
    - if: "$CI_COMMIT_BRANCH =~ /^([0-9]+-.*)$/"
      changes:
        - ai-packages/embedding-modules/**/*
    # Blocco della prima esecuzione quando branch appena creato
    - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BEFORE_SHA == "0000000000000000000000000000000000000000"'
      when: never
  trigger:
    include: "/.gitlab/.gitlab-ci-embedding-module.yaml"
    strategy: depend
