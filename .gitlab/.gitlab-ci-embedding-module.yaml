################################################################################
#                           STAGES, VARIABLES & INCLUDE                         #
################################################################################

stages:
- build
- container-scanning
- restart

variables:
  KANIKO_IMAGE: "gcr.io/kaniko-project/executor:v1.23.2-debug"
  CS_ANALYZER_IMAGE: "$CI_TEMPLATE_REGISTRY_HOST/security-products/container-scanning:7"

include:
- local: '/.gitlab/.gitlab-templates.yaml'

################################################################################
#                                   JOBS                                        #
################################################################################

Fetch config:
  stage: build
  image: alpine:3.16
  script:
  - apk add --no-cache grep
  - VERSION=$(grep '^OPENK9_VERSION=' python_modules_config.txt | cut -d '=' -f2)
  # Extract PYTHON_BASE_DOCKER_IMAGE value from config file
  - PYTHON_BASE_DOCKER_IMAGE=$(grep '^PYTHON_BASE_DOCKER_IMAGE=' python_modules_config.txt | cut -d '=' -f2)
  # Write results to .env file
  - echo "VERSION=$VERSION" > "$CI_PROJECT_DIR/config.env"
  - echo "PYTHON_BASE_DOCKER_IMAGE=$PYTHON_BASE_DOCKER_IMAGE" >> "$CI_PROJECT_DIR/config.env"
  artifacts:
    paths:
    - config.env
    expire_in: 1 day
  rules:
  - if: '$CI_COMMIT_BRANCH == "main"'
  - if: '$CI_COMMIT_TAG'
  - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
  - if: '$CI_COMMIT_BRANCH =~ /^[0-9]+-.*$/'

######################## BUILD EMBEDDING OPENAI ########################
Build Embedding OpenAI:
  stage: build
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [ "" ]
  needs:
  - job: Fetch config
    artifacts: true
  variables:
    DOCKER_CONFIG: "/kaniko/.docker"
    HOME: "/tmp"
  cache:
    key: "embedding-openai-${CI_COMMIT_REF_SLUG}"
    paths:
    - .pip-cache/
    policy: pull-push
    when: always
  before_script:
  - mkdir -p .pip-cache
  script:
  - source $CI_PROJECT_DIR/config.env
  # Print config.env
  - cat $CI_PROJECT_DIR/config.env
  - echo "=== Configuring Kaniko credentials ==="
  - mkdir -p /kaniko/.docker
  - |
    echo "{\"auths\":{\"registry.smc.it:49083\":{\"auth\":\"$(printf "%s:%s" "${CI_REGISTRY_USERNAME}" "${CI_REGISTRY_PASSWORD}" | base64 | tr -d '\n')\"}}}" \
    > /kaniko/.docker/config.json

  # Determine tag to use
  - |
    if [[ "$CI_COMMIT_BRANCH" == "main" || "$CI_COMMIT_TAG" != "" ]]; then
      # For main branch or tag, use official version
      DOCKER_TAG="$VERSION"
    elif [[ "$CI_COMMIT_BRANCH" =~ ^[0-9]+-.*$ ]]; then
      # For feature branch, use 997-SNAPSHOT for AI components
      echo "=== Building with tag 997-SNAPSHOT for feature branch ==="
      DOCKER_TAG="997-SNAPSHOT"
    elif [[ "$CI_PIPELINE_SOURCE" == "merge_request_event" ]]; then
      # For merge requests, use standard version
      DOCKER_TAG="$VERSION"
    fi

    # Execute build with determined tag
    /kaniko/executor \
      --context "${CI_PROJECT_DIR}/ai-packages/embedding-modules" \
      --build-arg "PYTHON_BASE_DOCKER_IMAGE=${PYTHON_BASE_DOCKER_IMAGE}" \
      --dockerfile "${CI_PROJECT_DIR}/ai-packages/embedding-modules/Dockerfile.base" \
      --destination "${CI_REGISTRY_NAME}/openk9/embedding-openai:$DOCKER_TAG" \
      --cache=true \
      --cache-repo="${CI_REGISTRY_NAME}/openk9/embedding-openai-cache" \
      --cache-ttl=720h
  rules:
  - if: '$CI_COMMIT_BRANCH == "main"'
  - if: '$CI_COMMIT_TAG'
  - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
  - if: '$CI_COMMIT_BRANCH =~ /^[0-9]+-.*$/'

####################### BUILD EMBEDDING SENTENCE TRANSFORMER #######################
Build Embedding ST:
  stage: build
  image:
    name: gcr.io/kaniko-project/executor:v1.23.2-debug
    entrypoint: [ "" ]
  needs:
  - job: Fetch config
    artifacts: true
  variables:
    DOCKER_CONFIG: "/kaniko/.docker"
    HOME: "/tmp"
  cache:
    key: "embedding-st-${CI_COMMIT_REF_SLUG}"
    paths:
    - .pip-cache/
    policy: pull-push
    when: always
  before_script:
  - mkdir -p .pip-cache
  script:
  - source $CI_PROJECT_DIR/config.env
  # Print config.env
  - cat $CI_PROJECT_DIR/config.env
  - echo "=== Configuring Kaniko credentials ==="
  - mkdir -p /kaniko/.docker
  - |
    echo "{\"auths\":{\"registry.smc.it:49083\":{\"auth\":\"$(printf "%s:%s" "${CI_REGISTRY_USERNAME}" "${CI_REGISTRY_PASSWORD}" | base64 | tr -d '\n')\"}}}" \
    > /kaniko/.docker/config.json

  # Setting for build with or without push - DISABLING CACHE TO FIX EOF ERROR
  - |
    if [[ "$CI_COMMIT_BRANCH" == "main" || "$CI_COMMIT_TAG" != "" ]]; then
      # For main branch or tag, no-push, no cache to avoid EOF error
      /kaniko/executor \
        --context "${CI_PROJECT_DIR}/ai-packages/embedding-modules" \
        --build-arg "PYTHON_BASE_DOCKER_IMAGE=${PYTHON_BASE_DOCKER_IMAGE}" \
        --dockerfile "${CI_PROJECT_DIR}/ai-packages/embedding-modules/Dockerfile.sentence_transformer" \
        --no-push \
        --compressed-caching=false \
        --cleanup \
        --cache=false \
        --verbosity=debug
    elif [[ "$CI_COMMIT_BRANCH" =~ ^[0-9]+-.*$ ]]; then
      # For feature branch, build with no-push, no cache to avoid EOF error
      echo "=== Building ST for feature branch (no-push, no-cache) ==="
      /kaniko/executor \
        --context "${CI_PROJECT_DIR}/ai-packages/embedding-modules" \
        --build-arg "PYTHON_BASE_DOCKER_IMAGE=${PYTHON_BASE_DOCKER_IMAGE}" \
        --dockerfile "${CI_PROJECT_DIR}/ai-packages/embedding-modules/Dockerfile.sentence_transformer" \
        --no-push \
        --compressed-caching=false \
        --cleanup \
        --cache=false \
        --verbosity=debug
    elif [[ "$CI_PIPELINE_SOURCE" == "merge_request_event" ]]; then
      # For merge requests, no-push, no cache to avoid EOF error
      /kaniko/executor \
        --context "${CI_PROJECT_DIR}/ai-packages/embedding-modules" \
        --build-arg "PYTHON_BASE_DOCKER_IMAGE=${PYTHON_BASE_DOCKER_IMAGE}" \
        --dockerfile "${CI_PROJECT_DIR}/ai-packages/embedding-modules/Dockerfile.sentence_transformer" \
        --no-push \
        --compressed-caching=false \
        --cleanup \
        --cache=false \
        --verbosity=debug
    fi
  rules:
  - if: '$CI_COMMIT_BRANCH == "main"'
  - if: '$CI_COMMIT_TAG'
  - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
  - if: '$CI_COMMIT_BRANCH =~ /^[0-9]+-.*$/'

###################### CONTAINER SCANNING EMBEDDING OPENAI ######################
Container Scanning Embedding OpenAI:
  stage: container-scanning
  image: $CS_ANALYZER_IMAGE
  variables:
    CS_REGISTRY_USER: "$CI_REGISTRY_USERNAME"
    CS_REGISTRY_PASSWORD: "$CI_REGISTRY_PASSWORD"
    GIT_STRATEGY: fetch
    REGISTRY_COMPONENT_NAME: "embedding-openai"
  allow_failure: true
  needs:
  - job: Fetch config
    artifacts: true
  artifacts:
    reports:
      container_scanning: gl-container-scanning-report.json
      cyclonedx: "**/gl-sbom-*.cdx.json"
    paths:
    - gl-container-scanning-report.json
    - gl-dependency-scanning-report.json
    - "**/gl-sbom-*.cdx.json"
  before_script:
  - source $CI_PROJECT_DIR/config.env
  - export CS_IMAGE="$CI_REGISTRY_NAME/openk9/$REGISTRY_COMPONENT_NAME:$VERSION"
  - echo "Using version $VERSION"
  script:
  - gtcs scan
  rules:
  - if: '$CI_COMMIT_BRANCH == "main"'

######################## TRIGGER RESTART EMBEDDING #########################
Trigger Restart:
  extends: .restart_job_template
  variables:
    COMPONENT_NAME: "embedding-module"
    COMPONENT_TYPE: "ai"
  needs:
  - job: Fetch config
    artifacts: true
  - job: Build Embedding OpenAI
    artifacts: false
  - job: Build Embedding ST
    artifacts: false
  rules:
  # Rule for main branch
  - if: '$CI_COMMIT_BRANCH == "main"'
  # Rule for feature branch
  - if: "$CI_COMMIT_BRANCH =~ /^([0-9]+-.*)$/"

##############  SCANNING: ST (commented out because it's too heavy)  ##############
# Container Scanning Embedding ST:
#   extends: .container-scanning-template
#   dependencies: [Build Embedding ST]
#   variables:
