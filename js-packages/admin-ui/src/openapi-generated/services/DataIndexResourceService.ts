/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { AutoGenerateDocTypesRequest } from '../models/AutoGenerateDocTypesRequest';
import type { DataIndex } from '../models/DataIndex';
import type { DataIndexByDocTypes } from '../models/DataIndexByDocTypes';
import type { DataIndexDTO } from '../models/DataIndexDTO';
import type { GetMappingsOrSettingsFromDocTypesRequest } from '../models/GetMappingsOrSettingsFromDocTypesRequest';
import type { K9Column } from '../models/K9Column';
import type { K9EntityEventDataIndex } from '../models/K9EntityEventDataIndex';
import type { PageDataIndex } from '../models/PageDataIndex';
import type { PageDocType } from '../models/PageDocType';
import type { Tuple2DataIndexDocType } from '../models/Tuple2DataIndexDocType';

import type { CancelablePromise } from '../core/CancelablePromise';
import type { BaseHttpRequest } from '../core/BaseHttpRequest';

export class DataIndexResourceService {

    constructor(public readonly httpRequest: BaseHttpRequest) {}

    /**
     * @deprecated
     * Persist
     * @param requestBody 
     * @returns DataIndex OK
     * @throws ApiError
     */
    public postApiDatasourceDataIndexes(
requestBody: DataIndexDTO,
): CancelablePromise<DataIndex> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/datasource/data-indexes',
            body: requestBody,
            mediaType: 'application/json',
            errors: {
                400: `Bad Request`,
                401: `Not Authorized`,
                403: `Not Allowed`,
            },
        });
    }

    /**
     * @deprecated
     * Find All
     * @param afterId 
     * @param beforeId 
     * @param limit 
     * @param searchText 
     * @param sortBy 
     * @returns PageDataIndex OK
     * @throws ApiError
     */
    public getApiDatasourceDataIndexes(
afterId: number = -1,
beforeId: number = -1,
limit: number = 20,
searchText?: string,
sortBy?: K9Column,
): CancelablePromise<PageDataIndex> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/datasource/data-indexes',
            query: {
                'after_id': afterId,
                'before_id': beforeId,
                'limit': limit,
                'searchText': searchText,
                'sortBy': sortBy,
            },
            errors: {
                401: `Not Authorized`,
                403: `Not Allowed`,
            },
        });
    }

    /**
     * @deprecated
     * Count
     * @returns number OK
     * @throws ApiError
     */
    public getApiDatasourceDataIndexesCount(): CancelablePromise<number> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/datasource/data-indexes/count',
            errors: {
                401: `Not Authorized`,
                403: `Not Allowed`,
            },
        });
    }

    /**
     * @deprecated
     * Get Processor
     * @returns K9EntityEventDataIndex OK
     * @throws ApiError
     */
    public getApiDatasourceDataIndexesStream(): CancelablePromise<Array<K9EntityEventDataIndex>> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/datasource/data-indexes/stream',
            errors: {
                401: `Not Authorized`,
                403: `Not Allowed`,
            },
        });
    }

    /**
     * @deprecated
     * Update
     * @param id 
     * @param requestBody 
     * @returns DataIndex OK
     * @throws ApiError
     */
    public putApiDatasourceDataIndexes(
id: number,
requestBody: DataIndexDTO,
): CancelablePromise<DataIndex> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/api/datasource/data-indexes/{id}',
            path: {
                'id': id,
            },
            body: requestBody,
            mediaType: 'application/json',
            errors: {
                400: `Bad Request`,
                401: `Not Authorized`,
                403: `Not Allowed`,
            },
        });
    }

    /**
     * @deprecated
     * Patch
     * @param id 
     * @param requestBody 
     * @returns DataIndex OK
     * @throws ApiError
     */
    public patchApiDatasourceDataIndexes(
id: number,
requestBody: DataIndexDTO,
): CancelablePromise<DataIndex> {
        return this.httpRequest.request({
            method: 'PATCH',
            url: '/api/datasource/data-indexes/{id}',
            path: {
                'id': id,
            },
            body: requestBody,
            mediaType: 'application/json',
            errors: {
                401: `Not Authorized`,
                403: `Not Allowed`,
            },
        });
    }

    /**
     * @deprecated
     * Find By Id
     * @param id 
     * @returns DataIndex OK
     * @throws ApiError
     */
    public getApiDatasourceDataIndexes1(
id: number,
): CancelablePromise<DataIndex> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/datasource/data-indexes/{id}',
            path: {
                'id': id,
            },
            errors: {
                401: `Not Authorized`,
                403: `Not Allowed`,
            },
        });
    }

    /**
     * @deprecated
     * Delete By Id
     * @param id 
     * @returns DataIndex OK
     * @throws ApiError
     */
    public deleteApiDatasourceDataIndexes(
id: number,
): CancelablePromise<DataIndex> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/api/datasource/data-indexes/{id}',
            path: {
                'id': id,
            },
            errors: {
                401: `Not Authorized`,
                403: `Not Allowed`,
            },
        });
    }

    /**
     * @deprecated
     * Get Doc Types
     * @param id 
     * @param afterId 
     * @param beforeId 
     * @param limit 
     * @param searchText 
     * @param sortBy 
     * @returns PageDocType OK
     * @throws ApiError
     */
    public getApiDatasourceDataIndexesDocTypes(
id: number,
afterId: number = -1,
beforeId: number = -1,
limit: number = 20,
searchText?: string,
sortBy?: K9Column,
): CancelablePromise<PageDocType> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/datasource/data-indexes/{id}/doc-types',
            path: {
                'id': id,
            },
            query: {
                'after_id': afterId,
                'before_id': beforeId,
                'limit': limit,
                'searchText': searchText,
                'sortBy': sortBy,
            },
            errors: {
                401: `Not Authorized`,
                403: `Not Allowed`,
            },
        });
    }

    /**
     * @deprecated
     * Remove Doc Type
     * @param docTypeId 
     * @param id 
     * @returns Tuple2DataIndexDocType OK
     * @throws ApiError
     */
    public deleteApiDatasourceDataIndexesDocTypes(
docTypeId: number,
id: number,
): CancelablePromise<Tuple2DataIndexDocType> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/api/datasource/data-indexes/{id}/doc-types/{docTypeId}',
            path: {
                'docTypeId': docTypeId,
                'id': id,
            },
            errors: {
                401: `Not Authorized`,
                403: `Not Allowed`,
            },
        });
    }

    /**
     * @deprecated
     * Add Doc Type
     * @param docTypeId 
     * @param id 
     * @returns Tuple2DataIndexDocType OK
     * @throws ApiError
     */
    public putApiDatasourceDataIndexesDocTypes(
docTypeId: number,
id: number,
): CancelablePromise<Tuple2DataIndexDocType> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/api/datasource/data-indexes/{id}/doc-types/{docTypeId}',
            path: {
                'docTypeId': docTypeId,
                'id': id,
            },
            errors: {
                401: `Not Authorized`,
                403: `Not Allowed`,
            },
        });
    }

    /**
     * Auto Generate Doc Types
     * @param requestBody 
     * @returns any Created
     * @throws ApiError
     */
    public postApiDatasourceV1DataIndexAutoGenerateDocTypes(
requestBody: AutoGenerateDocTypesRequest,
): CancelablePromise<any> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/datasource/v1/data-index/auto-generate-doc-types',
            body: requestBody,
            mediaType: 'application/json',
            errors: {
                400: `Bad Request`,
                401: `Not Authorized`,
                403: `Not Allowed`,
            },
        });
    }

    /**
     * @deprecated
     * Create Data Index From Doc Types
     * @param datasourceId 
     * @param requestBody 
     * @returns DataIndex OK
     * @throws ApiError
     */
    public postApiDatasourceV1DataIndexCreateDataIndexFromDocTypes(
datasourceId: number,
requestBody: DataIndexByDocTypes,
): CancelablePromise<DataIndex> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/datasource/v1/data-index/create-data-index-from-doc-types/{datasourceId}',
            path: {
                'datasourceId': datasourceId,
            },
            body: requestBody,
            mediaType: 'application/json',
            errors: {
                400: `Bad Request`,
                401: `Not Authorized`,
                403: `Not Allowed`,
            },
        });
    }

    /**
     * Get Mappings
     * @param requestBody 
     * @returns any OK
     * @throws ApiError
     */
    public postApiDatasourceV1DataIndexGetMappingsFromDocTypes(
requestBody: GetMappingsOrSettingsFromDocTypesRequest,
): CancelablePromise<Record<string, any>> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/datasource/v1/data-index/get-mappings-from-doc-types',
            body: requestBody,
            mediaType: 'application/json',
            errors: {
                400: `Bad Request`,
                401: `Not Authorized`,
                403: `Not Allowed`,
            },
        });
    }

    /**
     * Get Settings
     * @param requestBody 
     * @returns any OK
     * @throws ApiError
     */
    public postApiDatasourceV1DataIndexGetSettingsFromDocTypes(
requestBody: GetMappingsOrSettingsFromDocTypesRequest,
): CancelablePromise<Record<string, any>> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/datasource/v1/data-index/get-settings-from-doc-types',
            body: requestBody,
            mediaType: 'application/json',
            errors: {
                400: `Bad Request`,
                401: `Not Authorized`,
                403: `Not Allowed`,
            },
        });
    }

}
