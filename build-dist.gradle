
apply plugin: 'java'

configurations {
	distCore {
		transitive = false
		visible = false
	}
	distEntityManager {
		transitive = false
		visible = false
	}
}

repositories {
	mavenLocal()
	mavenCentral()
}

dependencies {
	distCore project(path: ':osgi:ingestion:ingestion-api', transitive: false)
	distCore project(path: ':osgi:ingestion:ingestion-logic-api', transitive: false)
	distCore project(path: ':osgi:ingestion:ingestion-logic-service', transitive: false)
	distCore project(path: ':osgi:ingestion:ingestion-driver-manager-api', transitive: false)
	distCore project(path: ':osgi:ingestion:ingestion-driver-manager-service', transitive: false)
	distCore project(path: ':osgi:ingestion:ingestion-service', transitive: false)
	distCore project(path: ':osgi:ingestion:ingestion-queue', transitive: false)
	distCore project(path: ':osgi:web:http-api', transitive: false)
	distCore project(path: ':osgi:web:http-service', transitive: false)
	distCore project(path: ':osgi:web:http-bundle-ext', transitive: false)
	distCore project(path: ':osgi:web:open-api', transitive: false)
	distCore project(path: ':osgi:common:third-party', transitive: false)
	distCore project(path: ':osgi:common:osgi-api', transitive: false)
	distCore project(path: ':osgi:common:serialization-api', transitive: false)
	distCore project(path: ':osgi:plugin:plugin-api', transitive: false)
	distCore project(path: ':osgi:plugin:plugin-service', transitive: false)
	distCore project(path: ':osgi:plugin:plugin-web', transitive: false)
	distCore project(path: ':osgi:common:serialization-service', transitive: false)
	distCore project(path: ':osgi:common:model', transitive: false)
	distCore project(path: ':osgi:common:http-serialization', transitive: false)
	distCore project(path: ':osgi:common:core-api', transitive: false)

	//distCore project(path: ':osgi:common:reactor-agent', transitive: false)

	distCore project(path: ':osgi:common:common-api', transitive: false)
	distCore project(path: ':osgi:database:sql-api:', transitive: false)
	distCore project(path: ':osgi:database:sql-service:', transitive: false)
	distCore project(path: ':osgi:database:sql-jdbc-service:', transitive: false)
	distCore project(path: ':osgi:database:sql-scheduler:', transitive: false)
	distCore project(path: ':osgi:database:sql-scheduler-web:', transitive: false)

	distCore project(path: ':osgi:database:repository-http-api:', transitive: false)
	distCore project(path: ':osgi:database:repository-http-service:', transitive: false)

	distCore project(path: ':osgi:schema-registry:schema-registry-service', transitive: false)
	distCore project(path: ':osgi:schema-registry:schema-registry-api', transitive: false)
	distCore project(path: 'osgi:schema-registry:schema-registry-avro', transitive: false)
	distCore project(path: ':osgi:datasource:datasource-api', transitive: false)
	distCore project(path: ':osgi:datasource:datasource-service', transitive: false)
	distCore project(path: ':osgi:datasource:datasource-web', transitive: false)
	distCore project(path: ':osgi:search:search-api', transitive: false)
	distCore project(path: ':osgi:search:search-service', transitive: false)
	distCore project(path: ':osgi:search:search-client-api', transitive: false)
	distCore project(path: ':osgi:search:search-client-service', transitive: false)
	distCore project(path: ':osgi:search:search-enrich-service', transitive: false)
	distCore project(path: ':osgi:search:search-enrich-api', transitive: false)
	distCore project(path: ':osgi:search:search-enrich-mapper-service', transitive: false)
	distCore project(path: ':osgi:search:search-enrich-mapper-api', transitive: false)
	distCore project(path: ':osgi:metrics:metrics-api', transitive: false)
	distCore project(path: ':osgi:metrics:metrics-service', transitive: false)
	distCore project(path: ':osgi:metrics:metrics-ext', transitive: false)

	distCore project(path: ':osgi:cache:cache-api', transitive: false)

	distCore project(path: ':plugins:email', transitive: false)
	distCore project(path: ':plugins:liferay', transitive: false)
	distCore project(path: ':plugins:web', transitive: false)
	distCore project(path: ':plugins:applications', transitive: false)

	// AUTH
	distCore project(path: ':osgi:auth:auth-keycloak-api', transitive: false)
	distCore project(path: ':osgi:auth:auth-keycloak-service', transitive: false)
	distCore project(path: ':osgi:auth:auth-keycloak-web', transitive: false)
	distCore project(path: ':osgi:auth:auth-keycloak-query-parser', transitive: false)

	//ENTITY MANAGER CLIENT
	distCore project(path: ':osgi:entity-manager:entity-manager-client-api', transitive: false)
	distCore project(path: ':osgi:entity-manager:entity-manager-client-service', transitive: false)
	distCore project(path: ':osgi:entity-manager:entity-manager-model', transitive: false)

	distCore project(path: ':osgi:init-data', transitive: false)

	// felix dependency manager

	distCore group: 'org.apache.felix', name: 'org.apache.felix.dependencymanager', version: '4.6.0' , transitive: false
	distCore group: 'org.apache.felix', name: 'org.apache.felix.dependencymanager.shell', version: '4.0.8' , transitive: false
	distCore group: 'org.apache.felix', name: 'org.apache.felix.dependencymanager.runtime', version: '4.0.7' , transitive: false

	distEntityManager project(path: ':osgi:common:common-api', transitive: false)
	distEntityManager project(path: ':osgi:common:core-api', transitive: false)
	distEntityManager project(path: ':osgi:common:http-serialization', transitive: false)
	distEntityManager project(path: ':osgi:common:model', transitive: false)
	distEntityManager project(path: ':osgi:common:osgi-api', transitive: false)
	distEntityManager project(path: ':osgi:common:serialization-api', transitive: false)
	distEntityManager project(path: ':osgi:common:serialization-service', transitive: false)
	distEntityManager project(path: ':osgi:common:third-party', transitive: false)

	distEntityManager project(path: ':osgi:web:http-api', transitive: false)
	distEntityManager project(path: ':osgi:web:http-service', transitive: false)
	distEntityManager project(path: ':osgi:web:http-bundle-ext', transitive: false)
	distEntityManager project(path: ':osgi:web:open-api', transitive: false)

	distEntityManager project(path: ':osgi:entity-manager:entity-manager-api', transitive: false)
	distEntityManager project(path: ':osgi:entity-manager:entity-manager-service', transitive: false)
	distEntityManager project(path: ':osgi:entity-manager:entity-manager-model', transitive: false)
	distEntityManager project(path: ':osgi:entity-manager:entity-manager-web', transitive: false)
	distEntityManager project(path: ':osgi:entity-manager:neo4j-relationship-graph-impl', transitive: false)
	distEntityManager project(path: ':osgi:entity-manager:relationship-graph-api', transitive: false)

}

def distConfigurations = configurations
		.findAll({it.name.startsWith("dist")})
		.collect()


distConfigurations
		.forEach({conf ->

	def dependencies = conf.dependencies

	def confTmp = configurations.create("confTmp-$conf.name")

	confTmp.dependencies.addAll(dependencies)

	def distName = toSnakeCase(conf.name.substring(4))

	tasks.register("build${conf.name.substring(4)}", Copy, {
			from(confTmp)
			into "$rootDir/build/$distName/libs"
	})

	tasks.register("libsFolder${conf.name.substring(4)}", {
		doLast {
			println "$rootDir/build/$distName/libs"
		}
	})

	if (properties.get("karafDir") != null) {

		tasks.register("deploy${conf.name.substring(4)}", Copy, {
			from(confTmp)
			into "$karafDir/$distName/deploy"
		})

	}
	def cleanDist = tasks.register("clean${conf.name.substring(4)}", Delete, {
		delete("$rootDir/build/$distName")
	})

	clean.dependsOn(cleanDist)

})

task cleanDist {
	def cleanDistTaskNames = distConfigurations
			.collect({tasks.named("clean${it.name.substring(4)}")})
	dependsOn(cleanDistTaskNames)
}

task buildDist {
	def buildDistTaskNames = distConfigurations
			.collect({tasks.named("build${it.name.substring(4)}")})
	dependsOn(buildDistTaskNames)
}

task deployDist {
	def deployDistTaskNames = distConfigurations
			.collect({tasks.named("deploy${it.name.substring(4)}")})
	dependsOn(deployDistTaskNames)
}

task distList {
	doLast {
		distConfigurations
				.forEach({conf -> println(toSnakeCase(conf.name.substring(4)))})
	}
}

task distTasks {
	doLast {
		distConfigurations
				.forEach({conf -> println("build${conf.name.substring(4)}")})
	}
}

static String toSnakeCase(String text ) {
	text.replaceAll(/([A-Z])/, /-$1/).toLowerCase().replaceAll(/^-/, '')
}

